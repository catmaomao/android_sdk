package com.heyijoy.gamesdk.util;import java.io.BufferedReader;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.UnsupportedEncodingException;import java.net.InetAddress;import java.net.NetworkInterface;import java.net.SocketException;import java.net.URLEncoder;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.Date;import java.util.Enumeration;import java.util.Formatter;import java.util.HashMap;import java.util.List;import java.util.Locale;import java.util.Map;import java.util.Properties;import java.util.TreeMap;import java.util.Map.Entry;import java.util.regex.Matcher;import java.util.regex.Pattern;import com.heyijoy.gamesdk.act.GameSDKApplication;import com.heyijoy.gamesdk.act.HYCallBack;import com.heyijoy.gamesdk.activity.HYQQLoginActivity;import com.heyijoy.gamesdk.data.Bean;import com.heyijoy.gamesdk.data.BonusBean;import com.heyijoy.gamesdk.data.HYThridParams;import com.heyijoy.gamesdk.data.TaskBean;import com.heyijoy.gamesdk.data.User;import com.heyijoy.gamesdk.http.HttpApi;import com.heyijoy.gamesdk.lib.HYConstant;import com.heyijoy.gamesdk.widget.BindingPhoneDialog;import com.tencent.mm.sdk.modelmsg.SendAuth;import com.tencent.mm.sdk.openapi.IWXAPI;import com.tencent.mm.sdk.openapi.WXAPIFactory;import android.app.ActivityManager;import android.app.ActivityManager.RunningAppProcessInfo;import android.content.ComponentName;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.content.SharedPreferences.Editor;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.content.pm.PackageManager.NameNotFoundException;import android.content.pm.ResolveInfo;import android.content.res.Configuration;import android.graphics.Bitmap;import android.graphics.Bitmap.CompressFormat;import android.graphics.Canvas;import android.graphics.Paint;import android.graphics.PixelFormat;import android.graphics.PorterDuff;import android.graphics.PorterDuffXfermode;import android.graphics.Rect;import android.graphics.RectF;import android.graphics.drawable.Drawable;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.net.Uri;import android.net.wifi.WifiInfo;import android.net.wifi.WifiManager;import android.os.Environment;import android.os.Handler;import android.os.StatFs;import android.provider.MediaStore;import android.provider.Settings;import android.telephony.TelephonyManager;import android.text.TextUtils;import android.view.View;import android.widget.Toast;/** * @Description: 工具类 *  * @version 1.0 * @created time 2012-9-13下午3:31:47 */public final class Util {	// application 上下文	// public static Context mContext;	// 汉字	public static final int CHINESE = 0;	// 数字或字母	public static final int NUMBER_OR_CHARACTER = 1;	// 数字和字母	public static final int NUMBER_CHARACTER = 2;	// 数字、字母、汉字	public static final int MIX = 3;	private Util() {	}	public static final int EXCEPTION = -1;	public static void saveImageToGallery(Context context, Bitmap bmp) {		// 首先保存图片		File appDir = new File(Environment.getExternalStorageDirectory(), "heyijoy");		if (!appDir.exists()) {			appDir.mkdir();		}		String fileName = System.currentTimeMillis() + ".jpg";		File file = new File(appDir, fileName);		try {			FileOutputStream fos = new FileOutputStream(file);			bmp.compress(CompressFormat.JPEG, 100, fos);			fos.flush();			fos.close();		} catch (FileNotFoundException e) {			e.printStackTrace();		} catch (IOException e) {			e.printStackTrace();		}		// 其次把文件插入到系统图库		try {			MediaStore.Images.Media.insertImage(context.getContentResolver(), file.getAbsolutePath(), fileName, null);		} catch (FileNotFoundException e) {			e.printStackTrace();		}		// 最后通知图库更新		context.sendBroadcast(				new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.parse("file://" + file.getAbsolutePath())));	}	/**	 * 传入秒, 返回格式化的String	 **/	public static String formatTime(long time) {		String minute = "" + time / 60;		String second = "" + time % 60;		if (minute.length() == 1)			minute = "0" + minute;		if (second.length() == 1)			second = "0" + second;		return minute + "分" + second + "秒";	}	// /**	// * 判断字符串是否为空	// */	// public static boolean isNull(String str) {	// return str == null || str.length() == 0;	// }	/** 传入秒, 返回格式化的String */	public static String formatTime(double s) {		try {			long msec = (long) s;			String minutes, seconds;			seconds = "00" + (msec) % 60;			minutes = "" + (msec / 60);			if (minutes.length() == 1)				minutes = "0" + minutes;			seconds = seconds.substring(seconds.length() - 2, seconds.length());			String times = minutes + ":" + seconds;			return times;		} catch (Exception e) {			Logger.e("ERROR formatTime() e=" + e.toString());			return "";		}	}	public static String URLEncoder(String s) {		if (s == null || s.trim().length() == 0)			return "";		try {			s = URLEncoder.encode(s, "UTF-8");		} catch (UnsupportedEncodingException e) {			return "";		} catch (NullPointerException e) {			return "";		}		return s;	}	/** 是否是MD5值 */	public static boolean isMD5(String s) {		if (s != null && s.length() == 32)			return true;		return false;	}	/** 获得MD5串 */	public static String md5(final String s) {		try {			MessageDigest digest = java.security.MessageDigest.getInstance("MD5");			digest.update(s.getBytes());			byte messageDigest[] = digest.digest();			StringBuffer hexString = new StringBuffer();			for (int i = 0; i < messageDigest.length; i++) {				String h = Integer.toHexString(0xFF & messageDigest[i]);				while (h.length() < 2)					h = "0" + h;				hexString.append(h);			}			return hexString.toString();		} catch (NoSuchAlgorithmException e) {			Logger.e("Util.md5()", e);			return "";		}	}	private final static String LINE_SEPARATOR = System.getProperty("line.separator");	public static String convertStreamToString(InputStream is) {		/*		 * To convert the InputStream to String we use the		 * BufferedReader.readLine() method. We iterate until the BufferedReader		 * return null which means there's no more data to read. Each line will		 * appended to a StringBuilder and returned as String.		 */		final BufferedReader reader = new BufferedReader(new InputStreamReader(is));		final StringBuilder sb = new StringBuilder();		String line = null;		try {			while ((line = reader.readLine()) != null) {				sb.append(line);				sb.append(LINE_SEPARATOR);			}		} catch (IOException e) {		} finally {			try {				is.close();			} catch (IOException e) {			}		}		return sb.toString();	}	public static String toNewStr(String str) {		char[] c = str.toCharArray();		for (int i = 0; i < c.length; i++) {			if (c[i] == 12288) {				c[i] = (char) 32;				continue;			}			if (c[i] > 65280 && c[i] < 65375) {				c[i] = (char) (c[i] - 65248);			}		}		return new String(c);	}	public static void deleteFile(final File file) {		if (file == null)			return;		if (file.exists()) { // 判断文件是否存在			if (file.isFile()) { // 判断是否是文件				file.delete(); // delete()方法 你应该知道 是删除的意思;				return;			} else if (file.isDirectory()) { // 否则如果它是一个目录				File files[] = file.listFiles(); // 声明目录下所有的文件 files[];				if (files != null) {					for (int i = 0; i < files.length; i++) { // 遍历目录下所有的文件						deleteFile(files[i]); // 把每个文件												// 用这个方法进行迭代//(错了,这里叫递归,刘仲男注)					}				}			}			file.delete();		}	}	/**	 * 	 * @return true: 网络可用 ; false: 网络不可用	 */	public static boolean hasInternet(Context context) {		ConnectivityManager m;		if (context != null) {			m = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);		} else {			m = null;		}		if (m == null) {			Logger.d("NetWorkState", "Unavailabel");			return false;		} else {			NetworkInfo[] info = m.getAllNetworkInfo();			if (info != null) {				for (int i = 0; i < info.length; i++) {					if (info[i].getState() == NetworkInfo.State.CONNECTED) {						Logger.d("NetWorkState", "Availabel");						return true;					}				}			}		}		return false;	}	/**	 * @return 是否是wifi网络	 */	public static boolean isWifi() {		Context context = GameSDKApplication.getInstance().getContext();		ConnectivityManager m = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);		NetworkInfo n = m.getActiveNetworkInfo();		if (n != null && n.getType() == ConnectivityManager.TYPE_WIFI)			return true;		return false;	}	/**	 * @return 联网类型,若无网络返回""	 */	public static String netWorkType() {		try {			Context context = GameSDKApplication.getInstance().getContext();			if (context == null)				return "0";			ConnectivityManager m = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);			if (m == null)				return "";			NetworkInfo networkInfo = m.getActiveNetworkInfo();			if (networkInfo == null)				return "0";			int networkType = networkInfo.getType();			if (networkType == 1)				return networkInfo.getTypeName(); // WIFI			else if (networkType == 0)				return networkInfo.getSubtype() + ""; // mobile(具体类型用数字表示)			else				return "0"; // 未知		} catch (Exception e) {			e.printStackTrace();			return "0"; // 未知		}	}	/**	 * @return 联网类型,若无网络返回""	 */	public static String netWorkType(Context context) {		try {			ConnectivityManager m = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);			if (m == null)				return "";			NetworkInfo networkInfo = m.getActiveNetworkInfo();			if (networkInfo == null)				return "0";			int networkType = networkInfo.getType();			if (networkType == 1)				return networkInfo.getTypeName(); // WIFI			else if (networkType == 0)				return networkInfo.getSubtype() + ""; // mobile(具体类型用数字表示)			else				return "0"; // 未知		} catch (Exception e) {			e.printStackTrace();			return "0"; // 未知		}	}	public static boolean isAirplaneMode() {		Context context = GameSDKApplication.getInstance().getContext();		int isAirplaneMode = Settings.System.getInt(context.getContentResolver(), Settings.System.AIRPLANE_MODE_ON, 0);		return (isAirplaneMode == 1) ? true : false;	}	public static String getProvidersName() {		Context context = GameSDKApplication.getInstance().getContext();		TelephonyManager telephonyManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);		String IMSI = telephonyManager.getSubscriberId();		// 返回唯一的用户ID;就是这张卡的编号神马的		IMSI = telephonyManager.getSubscriberId();		String ProvidersName = "";		// IMSI号前面3位460是国家，紧接着后面2位00 02 07是中国移动，01 06是中国联通，03 05是中国电信		if (IMSI != null && IMSI.length() >= 5) {			IMSI = IMSI.substring(0, 5);			if (IMSI.startsWith("46000") || IMSI.startsWith("46002") || IMSI.startsWith("46007")) {				ProvidersName = "中国移动";			} else if (IMSI.startsWith("46001") || IMSI.startsWith("46006")) {				ProvidersName = "中国联通";			} else if (IMSI.startsWith("46003") || IMSI.startsWith("46005")) {				ProvidersName = "中国电信";			} else if (IMSI.startsWith("46020")) {				ProvidersName = "中国铁通";			}			ProvidersName = URLEncoder.encode(ProvidersName += "_" + IMSI);// 运营商名字是汉子，需要urlencode		} else {			ProvidersName = "";		}		return ProvidersName;	}	/**	 * 获取IP地址	 */	public static String getLocalIpAddress() {		try {			for (Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) {				NetworkInterface intf = en.nextElement();				for (Enumeration<InetAddress> enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) {					InetAddress inetAddress = enumIpAddr.nextElement();					if (!inetAddress.isLoopbackAddress() && !inetAddress.isLinkLocalAddress()) {						return inetAddress.getHostAddress().toString();					}				}			}		} catch (SocketException ex) {			// Log.e("WifiPreference IpAddress", ex.toString());		}		return null;	}	/**	 * 验证码， 可以输入字母大小写都可以，还有数字	 * 	 * @param line	 *            输入	 * @param length	 *            长度	 * @return	 */	public static boolean checkVerificationCode(String line, int length) {		if (line.contains(" ")) {			return false;		}		Pattern p = Pattern.compile("[^0-9a-zA-Z]+");		Matcher m = p.matcher(line);		return !m.find() && line.length() == length;	}	// public static int getEnNZhMixStringLength(String str) {	// return str.length() + getChineseCharCount(str);	// }	/** Returns 是否有SD卡 */	public static boolean hasSDCard() {		if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState()))			return true;		return false;	}	public static boolean isNumber(String str) {		// return str.matches("^[-+]?(([0-9]+)([.]([0-9]+))?)$");		return str.matches("[\\d]+[.]?[\\d]+");	}	/**	 * Return 是否是横屏	 */	public static Boolean isLandscape(Context c) {		if (c.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {			return true;		}		return false;	}	/**	 * 跳转到浏览器	 */	public static void goBrowser(Context context, String url) {		Intent i = new Intent(Intent.ACTION_VIEW);		i.setData(Uri.parse(url));		context.startActivity(i);	}	/**	 * Returns SD卡信息	 * 	 * @return null为无SD卡;long[0]总大小;long[1]可用大小;(单位B)	 */	@SuppressWarnings("deprecation")	public static long[] getSDCardInfo() {		if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {			long[] sdCardInfo = new long[2];			File sdcardDir = Environment.getExternalStorageDirectory();			StatFs sf = new StatFs(sdcardDir.getAbsolutePath());			long bSize = sf.getBlockSize();			long bCount = sf.getBlockCount();			long availBlocks = sf.getAvailableBlocks();			sdCardInfo[0] = bSize * bCount;// 总大小			sdCardInfo[1] = bSize * availBlocks;// 可用大小			return sdCardInfo;		}		return null;	}	/*	 * MD5加密	 */	public static String getMD5Str(String str) {		MessageDigest messageDigest = null;		try {			messageDigest = MessageDigest.getInstance("MD5");			messageDigest.reset();			messageDigest.update(str.getBytes("UTF-8"));		} catch (NoSuchAlgorithmException e) {			Logger.e("F.getMD5Str()", e);		} catch (UnsupportedEncodingException e) {			Logger.e("F.getMD5Str()", e);		}		byte[] byteArray = messageDigest.digest();		StringBuffer md5StrBuff = new StringBuffer();		for (int i = 0; i < byteArray.length; i++) {			if (Integer.toHexString(0xFF & byteArray[i]).length() == 1)				md5StrBuff.append("0").append(Integer.toHexString(0xFF & byteArray[i]));			else				md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));		}		// 16位加密，从第9位到25位		return md5StrBuff.substring(8, 24).toString().toUpperCase();	}	public static boolean isRightUserName(String userName) {// 判断用户名是否符合要求，有待于改善		if (userName.length() <= 30 && userName.length() >= 3) {			return true;		} else {			return false;		}	}	public static boolean isAllNum(String str) {		return str.matches("^[0-9]*$");	}	public static boolean isContainChinese(String str) {		Pattern p = Pattern.compile("[\u4e00-\u9fa5]");		Matcher m = p.matcher(str);		if (m.find()) {// 匹配到中文			return true;		}		return false;	}	public static boolean isAllLetter(String str) {		return str.matches("^[a-z]+$") || str.matches("^[A-Z]+$");	}	/**	 * 检查不能含有特殊字符	 * 	 * @param str	 * @return	 */	public static boolean isAllCharacter(String str) {		String regEx = "^[a-zA-Z0-9]+$";		Pattern p = Pattern.compile(regEx);		Matcher m = p.matcher(str);		return m.matches();	}	public static boolean isRightFormatForUsername(String str) {		return str.matches("^([\\w]|[-]){4,30}$");	}	public static boolean isRightPwd(String pwd) {		if (pwd != null && pwd.length() >= 5 && pwd.length() <= 16) {			return true;		} else {			return false;		}	}	public static boolean isRightFormatForPwd(String pwd) {		return pwd.matches("^([\\w]){6,16}$");	}	public static boolean isMobileNO(String mobiles) {		Pattern p = Pattern.compile("^((13[0-9])|(15[^4,\\D])|(18[0,1-9]))\\d{8}$");		Matcher m = p.matcher(mobiles);		return m.matches();	}	// 根据imei计算得到用户名	public static String getUserNameByImei() {		String imeistr = GameSDKApplication.getInstance().getImei();		long imei = 0;		try {			imei = Long.parseLong(imeistr);		} catch (Exception e) {		}		char[] digits = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', '0', 'p', 'q', 'r', 's',				't', 'u', 'v', 'w', 'x', 'y', 'z', '9', '8', '7', '6', '5', '4', '3', '2', '1', '0' };		char buf[] = new char[40];		int charPos = 0;		int radix = 35;		if (imei < 1) {			imei = System.currentTimeMillis();		}		while (imei > radix) {			long index = imei % radix;			buf[charPos++] = digits[(int) index];			imei = imei / radix;		}		buf[charPos] = digits[(int) imei];		return new String(buf, 0, charPos);	}	// 根据概率显示绑定手机号界面	// from 1注册绑定手机号，2、登录绑定手机号，3、支付绑定手机号	public static void showBindingDlgByChance(Context context, HYCallBack method, String from) {		// boolean isShow =		// GameSDKApplication.getInstance().getShowBindingDlgProbability() >		// Math.random() * 100;		User shareUser = GameSDKApplication.getInstance().getShareUser();		if (shareUser.getIsPay()) {// 支付过			SharedPreferences preferences = context.getSharedPreferences(HYConstant.PREF_FILE_USER,					Context.MODE_PRIVATE);			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");			String date = sdf.format(new java.util.Date());			String hasBindTime = preferences.getString(HYConstant.PREF_FILE_HAS_BIND_TIME_LOGIN, "");			if (hasBindTime.equals(date)) {// 已经提示过				method.onFailed(HYConstant.EXCEPTION_CODE, "已经绑定");			} else {				showBindingDlg(context, method, from);				Editor editor = preferences.edit();				editor.putString(HYConstant.PREF_FILE_HAS_BIND_TIME_LOGIN, date);				editor.commit();			}		} else {			method.onFailed(HYConstant.EXCEPTION_CODE, "尚未有支付记录");		}	}	// 显示绑定手机号界面	// from 1注册绑定手机号，2、登录绑定手机号，3、支付绑定手机号，4、消息绑定手机号，5、悬浮窗绑定手机号	public static void showBindingDlg(Context context, HYCallBack method, String from) {		if (!GameSDKApplication.getInstance().isIsneedbind()) {			method.onFailed(HYConstant.EXCEPTION_CODE, "非用户名注册不需要绑定");			return;		} else if (GameSDKApplication.getInstance()				.getIsbind(GameSDKApplication.getInstance().getUserFromPref(context).getUserName())) {// 如果已经绑定，返回			method.onFailed(HYConstant.EXCEPTION_CODE, "已绑定手机号");			return;		}		BindingPhoneDialog bindingDlg = new BindingPhoneDialog(context, method, from);		bindingDlg.show();	}	public static boolean isShowBindDlg(Context context) {		if (!GameSDKApplication.getInstance().isIsneedbind()) {			return false;		} else if (GameSDKApplication.getInstance()				.getIsbind(GameSDKApplication.getInstance().getUserFromPref(context).getUserName())) {// 如果已经绑定，返回			return false;		} else {			return true;		}	}	public static boolean isEmail(String email) {// 验证邮箱的正则表达式		if (email.contains("@")) {			return true;		} else {			return false;		}		/*		 * String format =		 * "^([a-z0-9A-Z]+[-|\\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]{2,}$"		 * ;		 * //p{Alpha}:内容是必选的，和字母字符[\p{Lower}\p{Upper}]等价。如：200896@163.com不是合法的。		 * //w{2,15}: 2~15个[a-zA-Z_0-9]字符；w{}内容是必选的。 如：dyh@152.com是合法的。		 * //[a-z0-9]{3,}：至少三个[a-z0-9]字符,[]内的是必选的；如：dyh200896@16.com是不合法的。		 * //[.]:'.'号时必选的； 如：dyh200896@163com是不合法的。		 * //p{Lower}{2,}小写字母，两个以上。如：dyh200896@163.c是不合法的。 if		 * (email.matches(format)) { return true;// 邮箱名合法，返回true } else { return		 * false;// 邮箱名不合法，返回false }		 */	}	// 防重复点击	private static long lastClickTime;	public static boolean isFastDoubleClick() {		long time = System.currentTimeMillis();		long timeD = time - lastClickTime;		if (0 < timeD && timeD < 1000) {			return true;		}		lastClickTime = time;		return false;	}	// 防重复运行	private static long lastRunTime;	public static boolean isFastRun() {		long time = System.currentTimeMillis();		long timeD = time - lastRunTime;		if (0 < timeD && timeD < 1000) {			return true;		}		lastRunTime = time;		return false;	}	public static String getCurrentTime(String format) {		Date date = new Date();		SimpleDateFormat sdf = new SimpleDateFormat(format, Locale.getDefault());		String currentTime = sdf.format(date);		return currentTime;	}	public static void sendBroadcast(Context context) {		sendBroadcast(context, "");	}	public static void sendBroadcast(Context context, String str) {		Intent mIntent = new Intent();		mIntent.setAction(HYConstant.YK_SDK_FLOAT);		if (android.os.Build.VERSION.SDK_INT >= 12) {			mIntent.setFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES);		}		mIntent.putExtra("from", str);		context.sendBroadcast(mIntent);	}	public static String getCurrentTime() {		return getCurrentTime("yyyy-MM-dd  HH:mm:ss");	}	public static boolean DateCompare(String s1, String s2) throws Exception {		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");		Date d1 = sdf.parse(s1);		Date d2 = sdf.parse(s2);		if (d1 == null || d2 == null) {			return false;		}		if (d1.getTime() - d2.getTime() > 0) {			return true;		} else {			return false;		}	}	// 获取任务列表	public static void getTaskList(final Context context, final String from) {		new Thread(new Runnable() {			@Override			public void run() {				HYCallBack callBack = new HYCallBack() {					@Override					public void onSuccess(Bean bean) {						if (!GameSDKApplication.getInstance().isHasTask()) {							GameSDKApplication.getInstance().setHasTask(true);						}						sendTaskState(context, "1", from);					}					@Override					public void onFailed(int code, String failReason) {						if (GameSDKApplication.getInstance().isHasTask()) {							sendTaskState(context, "1", from);						}					}				};				HttpApi.getInstance().requestTask(callBack);			}		}).start();	}	public static void getTaskListSec(final Context context) {		new Thread(new Runnable() {			@Override			public void run() {				HYCallBack callBack = new HYCallBack() {					@Override					public void onSuccess(Bean bean) {						if (!GameSDKApplication.getInstance().isHasTask()) {							GameSDKApplication.getInstance().setHasTask(true);						}						sendTaskState(context, "1", "init");						sendTaskState(context, "1", "login");					}					@Override					public void onFailed(int code, String failReason) {						if (GameSDKApplication.getInstance().isHasTask()) {							sendTaskState(context, "1", "init");							sendTaskState(context, "1", "login");						}					}				};				HttpApi.getInstance().requestTask(callBack);			}		}).start();	}	/**	 * 获取任务积分	 * 	 * @param payNum	 *            支付返积分金额条件,没有传 ""	 * @param status	 *            任务完成状态 0-未完成，1-完成	 * @param from	 *            请求来源 ，可选项： "init"，"login"，"pay"	 */	public static void sendTaskState(final Context context, String status, final String from) {		TaskBean mtaskBean = null;		final HashMap<String, TaskBean> paramsMap = handleBonus();		if (from != null && !"".equals(from) && paramsMap != null) {			mtaskBean = paramsMap.get(from);		}		if (mtaskBean == null) {			return;		}		if ("1".equals(mtaskBean.getStatus())) {			return;		}		HYCallBack callBack = new HYCallBack() {			@Override			public void onSuccess(Bean bean) {				String getBouns = ((BonusBean) bean).getBonus();				TaskBean payTaskBean = null, initTaskBean = null, loginTaskBean = null;				if ("init".equals(from)) {					loginTaskBean = paramsMap.get("login");					if (getBouns == null || "".equals(getBouns) || loginTaskBean == null) {						return;					}					if (!GameSDKApplication.getInstance().getIsDiffTask()) {						Toast.makeText(context, "首次启动游戏，+" + getBouns + "合乐智趣积分", Toast.LENGTH_SHORT).show();					} else {						if ("1".equals(loginTaskBean.getStatus())) {							Toast.makeText(context, "首次启动游戏，+" + getBouns + "合乐智趣积分", Toast.LENGTH_SHORT).show();						}					}				} else if ("login".equals(from)) {					boolean flag = false, isInitFinish = false;					payTaskBean = paramsMap.get("pay");					initTaskBean = paramsMap.get("init");					if (getBouns == null || "".equals(getBouns) || initTaskBean == null) {						return;					}					if (payTaskBean == null || payTaskBean.getAmount() == 0) {						flag = true;					}					if ("1".equals(initTaskBean.getStatus())) {						isInitFinish = true;					}					if (!GameSDKApplication.getInstance().getIsDiffTask()) {						if (flag) {							Toast.makeText(context, "首次登录游戏，+" + getBouns + "合乐智趣积分", Toast.LENGTH_LONG).show();							return;						}						Toast.makeText(context, "首次登录游戏，+" + getBouns + "合乐智趣积分；支付满"								+ (float) payTaskBean.getAmount() / 100 + "元，可获取" + payTaskBean.getBonus() + "合乐智趣积分",								Toast.LENGTH_LONG).show();					} else {						int initBonus = Integer.parseInt(initTaskBean.getBonus());						int loginBonus = Integer.parseInt(getBouns);						if (initBonus == 0 || loginBonus == 0) {							return;						}						if (flag) {							if (isInitFinish) {								Toast.makeText(context, "首次登录游戏，+" + (loginBonus) + "合乐智趣积分", Toast.LENGTH_LONG).show();							} else {								Toast.makeText(context, "首次启动并登录游戏，+" + (loginBonus + initBonus) + "合乐智趣积分",										Toast.LENGTH_LONG).show();							}						} else {							if (isInitFinish) {								Toast.makeText(context,										"首次登录游戏，+" + (loginBonus) + "合乐智趣积分；支付满" + (float) payTaskBean.getAmount() / 100												+ "元，可获取" + payTaskBean.getBonus() + "合乐智趣积分",										Toast.LENGTH_LONG).show();							} else {								Toast.makeText(context,										"首次启动并登录游戏，+" + (loginBonus + initBonus) + "合乐智趣积分；支付满"												+ (float) payTaskBean.getAmount() / 100 + "元，可获取"												+ payTaskBean.getBonus() + "合乐智趣积分",										Toast.LENGTH_LONG).show();							}						}					}				} else if ("pay".equals(from)) {					if (getBouns == null || "".equals(getBouns)) {						return;					}					Toast.makeText(context, "已支付成功，+" + getBouns + "合乐智趣积分", Toast.LENGTH_SHORT).show();				}			}			@Override			public void onFailed(int code, String failReason) {				Logger.d("pack&ver", "sendTaskState-error");			}		};		HttpApi.getInstance().requestTaskBonus(callBack, mtaskBean.getId(), status);	}	private static String byteToHex(byte[] paramArrayOfByte) {		Formatter localFormatter = new Formatter();		int i = paramArrayOfByte.length;		for (int j = 0;; j++) {			if (j >= i) {				String str = localFormatter.toString();				localFormatter.close();				return str;			}			byte b = paramArrayOfByte[j];			Object[] arrayOfObject = new Object[1];			arrayOfObject[0] = Byte.valueOf(b);			localFormatter.format("%02x", arrayOfObject);		}	}	public static void dontClick(final View v) {		v.setClickable(false);		new Handler().postDelayed(new Runnable() {			@Override			public void run() {				v.setClickable(true);			}		}, 2000);	}	public static boolean videoSwitch() {		if (android.os.Build.VERSION.SDK_INT >= 18 && GameSDKApplication.getInstance().isAddRecordFunction()) {			return true;		}		return false;	}	@SuppressWarnings({ "unchecked", "rawtypes" })	public static List<ResolveInfo> getAllPagckage(Context paramContext) {		PackageManager localPackageManager = paramContext.getPackageManager();		Intent localIntent = new Intent("android.intent.action.MAIN", null);		localIntent.addCategory("android.intent.category.LAUNCHER");		List localList = localPackageManager.queryIntentActivities(localIntent, 256);		Collections.sort(localList, new ResolveInfo.DisplayNameComparator(localPackageManager));		return localList;	}	public static boolean isForeground(Context context) {		try {			ActivityManager activityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);			List<RunningAppProcessInfo> appProcesses = activityManager.getRunningAppProcesses();			for (RunningAppProcessInfo appProcess : appProcesses) {				if (appProcess.processName.equals(context.getPackageName())) {					if (appProcess.importance == RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {						return true;					} else {						return false;					}				}			}		} catch (Exception e) {			e.printStackTrace();		}		return false;	}	public static boolean isSupportPresent(Context context) {// 从4.4开始支持 也就是																// 版本号>= 65		PackageManager manager = context.getPackageManager();		PackageInfo info = null;		try {			info = manager.getPackageInfo(getPack(), 0);			int versionCode = info.versionCode;			if (versionCode >= 65) {				return true;			}		} catch (NameNotFoundException e) {			e.printStackTrace();		}		return false;	}	public static int isHasSim(Context context) {		TelephonyManager manager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);		return manager.getSimState();	}	public static float sort(float[] vers) {		float temp = 0;		for (int i = 0; i <= vers.length - 2; i++) {			for (int j = i + 1; j <= vers.length - 1; j++) {				if (vers[i] > vers[j]) {					temp = vers[i];					vers[i] = vers[j];					vers[j] = temp;				}			}		}		return vers[vers.length - 1];	}	public static String[] sort(String[] vers) {		String temp = null;		for (int i = 0; i <= vers.length - 2; i++) {			for (int j = i + 1; j <= vers.length - 1; j++) {				if (Integer.parseInt(vers[i]) > Integer.parseInt(vers[j])) {					temp = vers[i];					vers[i] = vers[j];					vers[j] = temp;				}			}		}		return vers;	}	public static HashMap<String, TaskBean> handleBonus() {		HashMap<String, TaskBean> paramsMap = new HashMap<String, TaskBean>();		ArrayList<TaskBean> getvipList = GameSDKApplication.getInstance().getTaskBeanList();		if (getvipList != null) {			TaskBean taskBean = null;			String flag = "";			int size = getvipList.size();			if (size != 0) {				for (int i = 0; i < size; i++) {					taskBean = getvipList.get(i);					flag = taskBean.getTaskType();					if ("1".equals(flag)) {						paramsMap.put("init", taskBean);					} else if ("2".equals(flag)) {						paramsMap.put("login", taskBean);					} else if ("3".equals(flag)) {						paramsMap.put("pay", taskBean);					}				}				return paramsMap;			}		}		return null;	}	public static void getTaskListByPre(final HYCallBack mCallBack) {		HYCallBack callBack = new HYCallBack() {			@Override			public void onSuccess(Bean bean) {				GameSDKApplication.getInstance().setHasTask(true);				ArrayList<TaskBean> getvipList = GameSDKApplication.getInstance().getTaskBeanList();				if (getvipList == null || getvipList.size() == 0) {					mCallBack.onFailed(HYConstant.EXCEPTION_CODE, "");				} else {					mCallBack.onSuccess(bean);				}			}			@Override			public void onFailed(int code, String failReason) {				GameSDKApplication.getInstance().setHasTask(false);				mCallBack.onFailed(code, failReason);			}		};		HttpApi.getInstance().requestTask(callBack);	}	public static String toStandardString(String str) {		char[] c = str.toCharArray();		for (int i = 0; i < c.length; i++) {			if (c[i] == 32) {				c[i] = (char) 12288;				continue;			}			if (c[i] < 127 && c[i] > 32)				c[i] = (char) (c[i] + 65248);		}		return new String(c);	}	public static String getPack() {		String pack = GameSDKApplication.getInstance().getPackFormGameCenter();		if ("".equals(pack)) {			pack = HYConstant.DEFAULT_PACKNAME;		}		return pack;	}	private static String encryptSha1(byte[] paramArrayOfByte) {		try {			MessageDigest localMessageDigest = MessageDigest.getInstance("SHA-1");			localMessageDigest.reset();			localMessageDigest.update(paramArrayOfByte);			String str = byteToHex(localMessageDigest.digest());			return str;		} catch (NoSuchAlgorithmException localNoSuchAlgorithmException) {			localNoSuchAlgorithmException.printStackTrace();		}		return "";	}	public static String getSignMd5(Context paramContext, String paramString) {		try {			String str = MD5.hexdigest(					paramContext.getPackageManager().getPackageInfo(paramString, 64).signatures[0].toByteArray());			return str;		} catch (PackageManager.NameNotFoundException localNameNotFoundException) {			localNameNotFoundException.printStackTrace();		}		return null;	}	public static String getSignSha1(Context paramContext, String paramString) {		try {			String str = encryptSha1(					paramContext.getPackageManager().getPackageInfo(paramString, 64).signatures[0].toByteArray());			return str;		} catch (PackageManager.NameNotFoundException localNameNotFoundException) {			localNameNotFoundException.printStackTrace();		}		return null;	}	// 核对合乐智趣主客签名MD5	public static boolean confirmYK(Context context, String packageName) {		String signMD5 = getSignMd5(context, packageName);		if (signMD5.equals(HYConstant.YKMAIN_SIGN_MD5)) {			return true;		}		return false;	}	public static String num2clock(int num) {		int min = num / 60;		int second = num % 60;		String mins = "";		String seconds = "";		if (min < 10) {			mins = "0" + min;		} else {			mins = min + "";		}		if (second < 10) {			seconds = "0" + second;		} else {			seconds = "" + second;		}		return mins + ":" + seconds;	}	public static void launchVideoDetailPage(Context context, String vid) {		try {			Logger.d("--->launchVideoDetailPage final start");			Intent intent = new Intent();			intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP					| Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);			intent.putExtra("video_id", vid);			Logger.d("--->launchVideoDetailPage vid = " + vid);			intent.setComponent(new ComponentName("com.heyijoy.phone", "com.youku.ui.activity.DetailActivity"));			// new ComponentName(pkg, cls context.getPackageName());			context.startActivity(intent);			Logger.d("--->launchVideoDetailPage final end");		} catch (Exception e) {			Toast.makeText(context, "请安装合乐智趣视频客户端", 1000).show();		}	}	/**	 * drawable转bitmap	 * 	 * @param drawable	 * @return	 */	public static Bitmap drawableToBitmap(Drawable drawable) {		Bitmap bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(),				drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565);		Canvas canvas = new Canvas(bitmap);		drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());		drawable.draw(canvas);		return bitmap;	}	/**	 * 图片裁剪为圆形	 * 	 * @param bitmap	 * @return	 */	public static Bitmap makeRoundCorner(Bitmap bitmap) {		int width = bitmap.getWidth();		int height = bitmap.getHeight();		int left = 0, top = 0, right = width, bottom = height;		float roundPx = height / 2;		if (width > height) {			left = (width - height) / 2;			top = 0;			right = left + height;			bottom = height;		} else if (height > width) {			left = 0;			top = (height - width) / 2;			right = width;			bottom = top + width;			roundPx = width / 2;		}		Bitmap output = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);		Canvas canvas = new Canvas(output);		int color = 0xff424242;		Paint paint = new Paint();		Rect rect = new Rect(left, top, right, bottom);		RectF rectF = new RectF(rect);		paint.setAntiAlias(true);		canvas.drawARGB(0, 0, 0, 0);		paint.setColor(color);		canvas.drawRoundRect(rectF, roundPx, roundPx, paint);		paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));		canvas.drawBitmap(bitmap, rect, rect, paint);		return output;	}	public static void wxLogin(Context context) {		HYThridParams thridParams = GameSDKApplication.getInstance().getThridParams();		String appid = getWXAppid(thridParams);		// Log.d(TAG, "qqappid=" + appid);		if (TextUtils.isEmpty(appid)) {			Toast.makeText(context, "参数异常，请重新启动游戏", Toast.LENGTH_SHORT).show();		} else {			IWXAPI api = WXAPIFactory.createWXAPI(context, appid, true);			// api.isWXAppInstalled()			if (isWeixinAvilible(context)) {								api.registerApp(appid);				SendAuth.Req req = new SendAuth.Req();				req.scope = "snsapi_userinfo";				req.state = "heyijoy_wxlogin";				api.sendReq(req);			} else {				Toast.makeText(context, "请先安装微信客户端", Toast.LENGTH_SHORT).show();			}		}	}	/**	 * 微信客户端是否可用	 * 	 * @param context	 * @return	 */	public static boolean isWeixinAvilible(Context context) {		final PackageManager packageManager = context.getPackageManager();// 获取packagemanager		List<PackageInfo> pinfo = packageManager.getInstalledPackages(0);// 获取所有已安装程序的包信息		if (pinfo != null) {			for (int i = 0; i < pinfo.size(); i++) {				String pn = pinfo.get(i).packageName;				if (pn.equals("com.tencent.mm")) {					return true;				}			}		}		return false;	}	/**	 * 获取assets目录下面指定的.properties文件内容	 * 	 * @param context	 * @param assetsPropertiesFile	 * @return	 */	public static Map<String, String> getAssetPropConfig(Context context, String assetsPropertiesFile) {		try {			Properties pro = new Properties();			pro.load(new InputStreamReader(context.getAssets().open(assetsPropertiesFile), "UTF-8"));			Map<String, String> result = new HashMap<String, String>();			for (Entry<Object, Object> entry : pro.entrySet()) {				String keyStr = entry.getKey().toString().trim();				String keyVal = entry.getValue().toString().trim();				if (!result.containsKey(keyStr)) {					result.put(keyStr, keyVal);				}			}			return result;		} catch (Exception e) {			e.printStackTrace();		}		return null;	}	/**	 * QQappid	 * 	 * @param thridParams	 * @return	 */	public static String getQQAppid(HYThridParams thridParams) {		if (thridParams == null || !thridParams.contains("QQ_APPID")) {			return "";		}		return thridParams.getString("QQ_APPID");	}	/**	 * 微信appid	 * 	 * @param thridParams	 * @return	 */	public static String getWXAppid(HYThridParams thridParams) {		if (thridParams == null || !thridParams.contains("WX_APPID")) {			return "";		}		return thridParams.getString("WX_APPID");	}	/**	 * 微信appkey	 * 	 * @param thridParams	 * @return	 */	public static String getWXAppSecret(HYThridParams thridParams) {		if (thridParams == null || !thridParams.contains("WX_APPSECRET")) {			return "";		}		return thridParams.getString("WX_APPSECRET");	}	/**	 * 微博appkey	 * 	 * @param thridParams	 * @return	 */	public static String getWeiBoAppkey(HYThridParams thridParams) {		if (thridParams == null || !thridParams.contains("WEIBO_APPKEY")) {			return "";		}		return thridParams.getString("WEIBO_APPKEY");	}	/**	 * 是否带三方登录,字符串"yes"带，"no"不带	 * 	 * @param thridParams	 * @return	 */	public static String hasThridlogin(HYThridParams thridParams) {		if (thridParams == null || !thridParams.contains("HAS_THRID_LOGIN")) {			return "";		}		return thridParams.getString("HAS_THRID_LOGIN");	}	/**	 * 获取设备码	 * 	 * @return	 */	private static String deviceId = "";	public static String getDevice_id(Context context) {		TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);		deviceId = tm.getDeviceId();		if (TextUtils.isEmpty(deviceId)) {			deviceId = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);			if (TextUtils.isEmpty(deviceId)) {				WifiManager wifi = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);				WifiInfo info = wifi.getConnectionInfo();				deviceId = info.getMacAddress();			}		}		return md5(deviceId);	}	/**	 * 判断qq是否可用	 * 	 * @param context	 * @return	 */	public static boolean isQQClientAvailable(Context context) {		final PackageManager packageManager = context.getPackageManager();		List<PackageInfo> pinfo = packageManager.getInstalledPackages(0);		if (pinfo != null) {			for (int i = 0; i < pinfo.size(); i++) {				String pn = pinfo.get(i).packageName;				if (pn.equals("com.tencent.mobileqq")) {					return true;				}			}		}		return false;	}}